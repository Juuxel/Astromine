buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'maven-publish'
    id("java")
    id("java-library")
//    id 'com.diffplug.spotless' version '5.1.0' apply false
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id("net.corda.plugins.jar-filter") version("4.0.48") apply false
}

apply from: 'dependencies.gradle'

sourceSets {
    main {
        java {
            srcDir 'astromine-core/src/main/java'
            srcDir 'astromine-discoveries/src/main/java'
            srcDir 'astromine-foundations/src/main/java'
            srcDir 'astromine-technologies/src/main/java'
            srcDir 'astromine-transportations/src/main/java'
        }
        resources {
            srcDir 'astromine-core/src/main/resources'
            srcDir 'astromine-discoveries/src/main/resources'
            srcDir 'astromine-foundations/src/main/resources'
            srcDir 'astromine-technologies/src/main/resources'
            srcDir 'astromine-transportations/src/main/resources'
        }
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "4096"
        }
    }

    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'maven-publish'
//    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'com.matthewprenger.cursegradle'
    apply plugin: 'net.corda.plugins.jar-filter'
    apply plugin: 'java'
    apply plugin: 'java-library'

    sourceCompatibility = targetCompatibility = 1.8

    archivesBaseName = project.mod_name
    group = rootProject.mod_group
    version = rootProject.mod_version + "+" + project.version_meta

    ext {
        shouldGenerateData = false
        // A special flag to disable this module to go into production jar and mark this moudle to be running the datagen task.
        isRunningGenerateDataTask = path == ":astromine-datagen-initializer"
    }

    minecraft {
        mappings channel: 'official', version: rootProject.minecraft_version
        accessTransformer = rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

        runs {
            client {
                workingDirectory project.file('run')

                mods {
                    create(project.name) {
                        source sourceSets.main
                    }
                }
            }

            server {
                workingDirectory project.file('run')

                mods {
                    create(project.name) {
                        source sourceSets.main
                    }
                }
            }
        }
    }

    /*spotless {
        encoding 'UTF-8'
        enforceCheck(false)

        java {
            licenseHeaderFile(rootProject.file('HEADER'))
            removeUnusedImports()
            eclipse().configFile(rootProject.file('spotless/formatter-settings.xml'))
        }
    }*/

    repositories {
        mavenLocal()
        maven {
            name = "Cloth"
            url = "https://dl.bintray.com/shedaniel/cloth"
        }
        maven {
            name = "Modmaven"
            url = "https://modmaven.k-4u.nl"
        }
        maven { url "https://dl.bintray.com/shedaniel/autoconfig1u" }
    }

    dependencies {
//        dependencies.ext.useAsApiOptionally = { dep ->
//            modApi(dep) {
//                if (!dep.contains("net.fabricmc.fabric-api")) {
//                    exclude group: "net.fabricmc.fabric-api"
//                }
//                exclude group: "net.fabricmc"
//                if (!dep.contains("me.shedaniel")) {
//                    exclude group: "me.shedaniel"
//                }
//            }
//        }
//        dependencies.ext.useAsApi = { dep ->
//            useAsApiOptionally(dep)
//            if (project.name == "astromine-core")
//                include(dep)
//        }
//        dependencies.ext.useAsRuntime = { dep ->
//            modRuntime(dep) {
//                if (!dep.contains("net.fabricmc.fabric-api")) {
//                    exclude group: "net.fabricmc.fabric-api"
//                }
//                exclude group: "net.fabricmc"
//                if (!dep.contains("me.shedaniel")) {
//                    exclude group: "me.shedaniel"
//                }
//            }
//        }

        minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
        compile("org.jetbrains:annotations:19.0.0")

        runtimeOnly(fg.deobf("me.shedaniel:autoconfig1u-forge:${auto_config_version}")) {
            transitive = false
        }
        compileOnly("me.shedaniel:autoconfig1u-forge:${auto_config_version}") {
            transitive = false
        }
        compile(fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"))
        compile("org.jetbrains.kotlin:kotlin-stdlib:${project.kotlin_version}")
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${project.kotlin_version}")
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${project.kotlin_version}")
        compile(fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}"))
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier("sources")
        from sourceSets.main.allSource
    }
}

subprojects {
    archivesBaseName = project.name

    ext {
        cfProjectId = -1
    }

    task remapMavenJar(type: Copy, dependsOn: remapJar) {
        afterEvaluate {
            from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
            into("${project.buildDir}/libs/")
            rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
        }
    }

    configurations {
        dev
        remapped
    }

    jar {
        classifier("dev")
    }

    artifacts {
        dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
    }

    task jarFilter(type: net.corda.gradle.jarfilter.JarFilterTask) {
        jars jar
        annotations {
            forRemove = [
                    "org.jetbrains.annotations.NotNull",
                    "org.jetbrains.annotations.Nullable",
                    "org.jetbrains.annotations.ApiStatus\$Experimental",
                    "org.jetbrains.annotations.ApiStatus\$Internal",
                    "org.jetbrains.annotations.ApiStatus\$ScheduledForRemoval",
                    "org.jetbrains.annotations.ApiStatus\$AvailableSince",
                    "org.jetbrains.annotations.ApiStatus\$NonExtendable",
                    "org.jetbrains.annotations.ApiStatus\$OverrideOnly"
            ]
        }
    }

    remapJar.dependsOn("jarFilter")

    afterEvaluate {
        if (shouldGenerateData) {
            sourceSets {
                main {
                    resources {
                        srcDir 'src/generated/resources'
                    }
                }
                datagen {
                    compileClasspath += main.compileClasspath
                    runtimeClasspath += main.runtimeClasspath
                }
            }

            task datagenJar(type: Jar) {
                classifier("datagen")
                from sourceSets.datagen.output
            }

            configurations {
                datagenDev
                datagenCompile.extendsFrom(compileClasspath)
            }

            dependencies {
                datagenCompile sourceSets.main.output
            }

            artifacts {
                datagenDev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-datagen.jar"), type: 'jar', builtBy: datagenJar
            }

            if (isRunningGenerateDataTask) {
//                task generateData(type: RunClientTask, dependsOn: downloadAssets) {
//                    classpath = configurations.runtimeClasspath
//                    classpath sourceSets.datagen.runtimeClasspath
//                    classpath sourceSets.main.output
//                    classpath sourceSets.datagen.output
//                }
            }
        }

        curseforge {
            if ((project.hasProperty('curse_api_key') || System.getenv('curse_api_key') != null) && cfProjectId >= 0) {
                project {
                    id = cfProjectId.toString()
                    releaseType = rootProject.release_cycle
                    changelog = "View the changelog at https://github.com/Chainmail-Studios/Astromine"
                    ((String) rootProject.tagged_versions).split(",").each {
                        addGameVersion it
                    }
                    relations {
                        requiredDependency "fabric-api"
                        embeddedLibrary "cloth-api"
                        embeddedLibrary "cloth-config"
                        embeddedLibrary "auto-config-updated-api"
                        embeddedLibrary "cardinal-components"
                        embeddedLibrary "libblockattributes"
                        embeddedLibrary "patchouli-fabric"
                    }
                    mainArtifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar"))
                }
            }
            options {
                forgeGradleIntegration = false
                javaVersionAutoDetect = false
            }
        }
    }

    publishing {
        publications {
            create("${archivesBaseName}_mavenJava", MavenPublication) {
                afterEvaluate {
                    artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
                        builtBy remapMavenJar
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }
        }
    }

    task copyBuiltToMain(type: Copy) {
        from "${project.buildDir}/libs/"
        into "${rootProject.buildDir}/libs/"
        include "*.jar"
    }
    build.finalizedBy(copyBuiltToMain)
}

task generateDataAll
subprojects.forEach {
    if (it.isRunningGenerateDataTask) {
        generateDataAll.dependsOn("${it.path}:generateData")
    }
}

task deleteBuildFolderAll {
    doLast {
        allprojects {
            delete it.buildDir
            mkdir "${it.buildDir}/libs"
        }
    }
}
build.mustRunAfter(deleteBuildFolderAll)

task releaseOnCf
releaseOnCf.dependsOn(":curseforge")
subprojects { releaseOnCf.dependsOn("${it.path}:curseforge") }
//subprojects { rootProject.remapJar.dependsOn("${it.path}:remapJar") }
//subprojects { rootProject.spotlessApply.dependsOn("${it.path}:spotlessApply") }

//task remapMavenJar(type: RemapJarTask, dependsOn: jar) {
//    afterEvaluate {
//        input.set(file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar"))
//        archiveName = "${archivesBaseName}-${version}-maven.jar"
//        addNestedDependencies.set(false)
//    }
//}

sourceSets {
    datagen
}

dependencies {
    afterEvaluate {
        subprojects.each {
            compile project(path: ":${it.path}", configuration: "dev")
            if (!it.isRunningGenerateDataTask) {
                include project(path: ":${it.path}", configuration: "remapped")
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
//            artifact(file("${project.buildDir}/libs/$archivesBaseName-${project.version}-maven.jar")) {
//                builtBy remapMavenJar
//            }
//            artifact(sourcesJar) {
//                builtBy remapSourcesJar
//            }
            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    if (!it.isRunningGenerateDataTask) {
                        def depNode = depsNode.appendNode("dependency")
                        depNode.appendNode("groupId", it.group)
                        depNode.appendNode("artifactId", it.name)
                        depNode.appendNode("version", it.version)
                        depNode.appendNode("scope", "compile")
                    }
                }
            }
        }
    }
}

curseforge {
    if (project.hasProperty('curse_api_key') || System.getenv('curse_api_key') != null) {
        apiKey = project.hasProperty('curse_api_key') ? project.property('curse_api_key') : System.getenv('curse_api_key')
        project {
            id = "391739"
            releaseType = rootProject.release_cycle
            changelog = "View the changelog at https://github.com/Chainmail-Studios/Astromine"
            ((String) rootProject.tagged_versions).split(",").each {
                addGameVersion it
            }
            relations {
                requiredDependency "fabric-api"
                embeddedLibrary "cloth-api"
                embeddedLibrary "cloth-config"
                embeddedLibrary "auto-config-updated-api"
                embeddedLibrary "cardinal-components"
                embeddedLibrary "libblockattributes"
                embeddedLibrary "patchouli-fabric"
            }
            mainArtifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar"))
        }
    }
    options {
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}
