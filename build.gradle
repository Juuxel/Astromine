import net.fabricmc.loom.task.RunClientTask

plugins {
    id 'maven-publish'
    id 'com.diffplug.spotless' version '5.1.0' apply false
    id 'fabric-loom' version '0.4-SNAPSHOT' apply false
}

apply from: 'dependencies.gradle'

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'
    apply plugin: 'com.diffplug.spotless'

    archivesBaseName = project.mod_name
    group = rootProject.mod_group
    version = rootProject.mod_version + "+" + project.version_meta

    ext {
        shouldGenerateData = false
        isRunningGenerateDataTask = false
    }

    spotless {
        encoding 'UTF-8'
        enforceCheck(false)

        java {
            licenseHeaderFile(rootProject.file('HEADER'))
            removeUnusedImports()
            eclipse().configFile(rootProject.file('spotless/formatter-settings.xml'))
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    repositories {
        mavenLocal()
        maven {
            name = "Onyx Studios"
            url = "https://maven.onyxstudios.dev"
        }
        maven {
            name = "JitPack"
            url = "https://jitpack.io"
        }
        maven {
            name = "Jared"
            url = "https://maven.blamejared.com"
        }
        maven {
            name = "BuildCraft"
            url = "https://mod-buildcraft.com/maven"
        }
        maven {
            name = "SonaType"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "Ladysnake Libs"
            url = 'https://dl.bintray.com/ladysnake/libs'
        }
        maven {
            name = "Wrenchable"
            url = "https://dl.bintray.com/zundrel/wrenchable"
        }
        maven {
            name = "Cloth"
            url = "https://dl.bintray.com/shedaniel/cloth"
        }
        maven {
            name = "grondag"
            url = "https://grondag-repo.appspot.com"
            credentials {
                username = "guest"
                password = ""
            }
        }
        maven {
            name = "Earthcomputer"
            url = "https://dl.bintray.com/earthcomputer/mods"
        }
        maven {
            name = "Modmaven"
            url = "https://modmaven.k-4u.nl"
        }
    }

    dependencies {
        dependencies.ext.useAsApiOptionally = { dep ->
            modApi(dep) {
                if (!dep.contains("net.fabricmc.fabric-api")) {
                    exclude group: "net.fabricmc.fabric-api"
                }
                exclude group: "net.fabricmc"
                if (!dep.contains("me.shedaniel")) {
                    exclude group: "me.shedaniel"
                }
            }
        }
        dependencies.ext.useAsApi = { dep ->
            useAsApiOptionally(dep)
            if (project == rootProject)
                include(dep)
        }
        dependencies.ext.useAsRuntime = { dep ->
            modRuntime(dep) {
                if (!dep.contains("net.fabricmc.fabric-api")) {
                    exclude group: "net.fabricmc.fabric-api"
                }
                exclude group: "net.fabricmc"
                if (!dep.contains("me.shedaniel")) {
                    exclude group: "me.shedaniel"
                }
            }
        }

        minecraft group: 'com.mojang', name: 'minecraft', version: minecraft_version
        mappings group: 'net.fabricmc', name: 'yarn', version: mappings_version, classifier: 'v2'
        modImplementation "net.fabricmc:fabric-loader:$loader_version"
        useAsApiOptionally "net.fabricmc.fabric-api:fabric-api:$api_version"

        tap(rootProject.ext.setDefaultApis)
    }

    configurations {
        dev
    }

    jar {
        classifier("dev")
    }

    afterEvaluate {
        remapJar {
            input.set(file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"))
            archiveName = "${archivesBaseName}-${version}.jar"
        }

        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: 'jar', builtBy: remapJar
        }

        processResources {
            inputs.property 'version', project.version

            from(sourceSets.main.resources.srcDirs) {
                include 'fabric.mod.json'
                expand 'version': project.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude 'fabric.mod.json'
            }
        }

        if (shouldGenerateData) {
            sourceSets {
                main {
                    resources {
                        srcDir 'src/generated/resources'
                    }
                }
                datagen {
                    compileClasspath += main.compileClasspath
                    runtimeClasspath += main.runtimeClasspath
                }
            }

            task datagenJar(type: Jar) {
                classifier("datagen")
                from sourceSets.datagen.output
            }

            configurations {
                datagenDev
                datagenCompile.extendsFrom(compileClasspath)
            }

            dependencies {
                datagenCompile sourceSets.main.output
            }

            artifacts {
                datagenDev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-datagen.jar"), type: 'jar', builtBy: datagenJar
            }

            if (isRunningGenerateDataTask) {
                task generateData(type: RunClientTask, dependsOn: downloadAssets) {
                    classpath = configurations.runtimeClasspath
                    classpath sourceSets.datagen.runtimeClasspath
                    classpath sourceSets.main.output
                    classpath sourceSets.datagen.output
                }

                build.dependsOn generateData
            } else {
                rootProject.dependencies.include(rootProject.project("$path:"))
            }
        } else {
            rootProject.dependencies.include(rootProject.project("$path:"))
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }
    
    task deleteBuildFolder {
        file("${buildDir}").deleteDir()
    }
}

subprojects {
    task remapMavenJar(type: Copy, dependsOn: remapJar) {
        afterEvaluate {
            from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
            into("${project.buildDir}/libs/")
            rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
        }
    }

    afterEvaluate {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifact(file("${project.buildDir}/libs/$archivesBaseName-${project.version}-maven.jar")) {
                        builtBy remapMavenJar
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }
        }
    }
}

task generateDataAll
subprojects.forEach {
    if (it.isRunningGenerateDataTask) {
        generateDataAll.dependsOn("${it.path}:generateData")
    }
}

task deleteBuildFolderAll
subprojects.each { deleteBuildFolderAll.dependsOn("${it.path}:deleteBuildFolder") }

task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
    afterEvaluate {
        input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
        archiveName = "${archivesBaseName}-${version}-maven.jar"
        addNestedDependencies = false
    }
}

sourceSets {
    datagen
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(file("${project.buildDir}/libs/$archivesBaseName-${project.version}-maven.jar")) {
                builtBy remapMavenJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            pom.withXml {
                def buildid = System.getenv("PUBLISH_BUILD")

                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    if (!it.isRunningGenerateDataTask) {
                        def depNode = depsNode.appendNode("dependency")
                        depNode.appendNode("groupId", it.group)
                        depNode.appendNode("artifactId", it.name)
                        depNode.appendNode("version", buildid != null ? "${it.version}-${buildid}" : it.version)
                        depNode.appendNode("scope", "compile")
                    }
                }
            }
        }
    }
}

subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }
subprojects.each { spotlessApply.dependsOn("${it.path}:spotlessApply") }

dependencies {
    afterEvaluate {
        subprojects.each {
            compile project(path: ":${it.path}", configuration: "dev")
        }
    }

    // We would like to give a huge thanks to loom for not applying this
    modRuntime "net.fabricmc:dev-launch-injector:+"
    tap(rootProject.ext.setRuntimeTestMods)
}
