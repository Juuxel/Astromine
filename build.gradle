buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id("maven-publish")
    id("java")
    id("java-library")
//    id 'com.diffplug.spotless' version '5.1.0' apply false
    id("com.matthewprenger.cursegradle") version '1.4.0'
    id("net.corda.plugins.jar-filter") version("4.0.48") apply false
    id("net.minecraftforge.gradle")
}

apply from: 'dependencies.gradle'

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "4096"
    }
}

sourceCompatibility = targetCompatibility = 1.8

archivesBaseName = project.mod_name
group = rootProject.mod_group
version = rootProject.mod_version + "+" + project.version_meta

def versionProperties = ["version" : project.version]

sourceSets {
    // Root
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDirs += 'src/generated/resources'
        }
    }

    // Modules
    core {
        makeSourceSet(sourceSets.core, 'core')
    }
    dataInit {
        makeSourceSet(sourceSets.dataInit, 'datagen-initializer')
    }
    foundations {
        makeSourceSet(sourceSets.foundations, 'foundations')
        compileClasspath += sourceSets.core.output
    }
    transportations {
        makeSourceSet(sourceSets.transportations, 'transportations')
        compileClasspath += sourceSets.core.output
    }
    technologies {
        makeSourceSet(sourceSets.technologies, 'technologies')
        compileClasspath += sourceSets.core.output
        compileClasspath += sourceSets.foundations.output
    }
    discoveries {
        makeSourceSet(sourceSets.discoveries, 'discoveries')
        compileClasspath += sourceSets.core.output
        compileClasspath += sourceSets.foundations.output
        compileClasspath += sourceSets.technologies.output
    }

    // Test
    test {
        compileClasspath += sourceSets.core.output + sourceSets.discoveries.output + sourceSets.foundations.output + sourceSets.technologies.output + sourceSets.transportations.output
        runtimeClasspath += sourceSets.core.output + sourceSets.discoveries.output + sourceSets.foundations.output + sourceSets.technologies.output + sourceSets.transportations.output
    }

    // Data
    dataMain {
        java.srcDirs = ["src/datagen/java"]
        resources.srcDirs = ["src/datagen/resources"]
        compileClasspath += sourceSets.main.output
    }
    dataCore {
        makeDataSourceSet(sourceSets.dataCore, sourceSets.core, 'core')
    }
    dataDataInit {
        makeDataSourceSet(sourceSets.dataDataInit, sourceSets.dataInit, 'datagen-initializer')
    }
    dataDiscoveries {
        makeDataSourceSet(sourceSets.dataDiscoveries, sourceSets.discoveries, 'discoveries')
    }
    dataFoundations {
        makeDataSourceSet(sourceSets.dataFoundations, sourceSets.foundations, 'foundations')
    }
    dataTechnologies {
        makeDataSourceSet(sourceSets.dataTechnologies, sourceSets.technologies, 'technologies')
    }
    dataTransportations {
        makeDataSourceSet(sourceSets.dataTransportations, sourceSets.transportations, 'transportations')
    }
}

def makeSourceSet(SourceSet set, String name) {
    set.java {
        srcDir "astromine-$name/src/main/java"
    }
    set.resources {
        srcDirs += "astromine-$name/src/main/resources"
        srcDirs += "astromine-$name/src/generated/resources"
    }
    set.compileClasspath += sourceSets.main.output
}

def makeDataSourceSet(SourceSet data, SourceSet base, String name) {
    data.java.srcDirs = ["astromine-$name/src/datagen/java"]
    data.resources.srcDirs = ["astromine-$name/src/datagen/resources"]
    data.compileClasspath += sourceSets.main.output
    data.compileClasspath += sourceSets.dataMain.output
    data.compileClasspath += base.output
}

ext {
    replaceResourcesInfo = [
            "main" : sourceSets.main,
            "core" : sourceSets.core,
            "dataInit" : sourceSets.dataInit,
            "discoveries" : sourceSets.discoveries,
            "foundations" : sourceSets.foundations,
            "technologies" : sourceSets.technologies,
            "transportations" : sourceSets.transportations
    ]
}

replaceResourcesInfo.each { output, set ->
    return tasks.create("${output}ReplaceResources", Copy) {
        outputs.upToDateWhen { false }
        from (set.resources) {
            include 'META-INF/mods.toml'
            expand versionProperties
        }
        into "$buildDir/resources/$output/"
    }
}

configurations {
    def implementationExt = [coreImplementation, dataInitImplementation, discoveriesImplementation, foundationsImplementation, technologiesImplementation, transportationsImplementation,
                             testImplementation, dataMainImplementation, dataCoreImplementation, dataDataInitImplementation, dataDiscoveriesImplementation, dataFoundationsImplementation,
                             dataTechnologiesImplementation, dataTransportationsImplementation]
    def compileOnlyExt = [coreCompileOnly, dataInitCompileOnly, discoveriesCompileOnly, foundationsCompileOnly, technologiesCompileOnly, transportationsCompileOnly, testCompileOnly,
                          dataMainCompileOnly, dataCoreCompileOnly, dataDataInitCompileOnly, dataDiscoveriesCompileOnly, dataFoundationsCompileOnly, dataTechnologiesCompileOnly,
                          dataTransportationsCompileOnly]
    def runtimeOnlyExt = [coreRuntimeOnly, dataInitRuntimeOnly, discoveriesRuntimeOnly, foundationsRuntimeOnly, technologiesRuntimeOnly, transportationsRuntimeOnly, testRuntimeOnly,
                          dataMainRuntimeOnly, dataCoreRuntimeOnly, dataDataInitRuntimeOnly, dataDiscoveriesRuntimeOnly, dataFoundationsRuntimeOnly, dataTechnologiesRuntimeOnly,
                          dataTransportationsRuntimeOnly]

    for (def impl : implementationExt) {
        impl.extendsFrom(implementation)
    }
    for (def co : compileOnlyExt) {
        co.extendsFrom(compileOnly)
    }
    for (def ro : runtimeOnlyExt) {
        ro.extendsFrom(runtimeOnly)
    }
}

minecraft {
    mappings channel: 'official', version: project.minecraft_version
    accessTransformers(
            file('src/main/resources/META-INF/accesstransformer.cfg'),
            file('astromine-core/src/main/resources/META-INF/accesstransformer.cfg'),
            file('astromine-datagen-initializer/src/main/resources/META-INF/accesstransformer.cfg'),
            file('astromine-discoveries/src/main/resources/META-INF/accesstransformer.cfg'),
            file('astromine-foundations/src/main/resources/META-INF/accesstransformer.cfg'),
            file('astromine-technologies/src/main/resources/META-INF/accesstransformer.cfg'),
            file('astromine-transportations/src/main/resources/META-INF/accesstransformer.cfg'),
    )

    runs {
        client {
            workingDirectory project.file('run')
            properties 'forge.logging.console.level': 'debug'
            mods {
                astromine {
                    sources(sourceSets.main)
                }
                astrominecore {
                    sources(sourceSets.core)
                }
                astrominedatainit {
                    sources(sourceSets.dataInit)
                }
                astrominediscoveries {
                    sources(sourceSets.discoveries)
                }
                astrominefoundations {
                    sources(sourceSets.foundations)
                }
                astrominetechnologies {
                    sources(sourceSets.technologies)
                }
                astrominetransportations {
                    sources(sourceSets.transportations)
                }
            }
        }
        server {
            workingDirectory project.file('run_server')
            properties 'forge.logging.console.level': 'debug'
            mods {
                astromine {
                    sources(sourceSets.main)
                }
                astrominecore {
                    sources(sourceSets.core)
                }
                astrominedatainit {
                    sources(sourceSets.dataInit)
                }
                astrominediscoveries {
                    sources(sourceSets.discoveries)
                }
                astrominefoundations {
                    sources(sourceSets.foundations)
                }
                astrominetechnologies {
                    sources(sourceSets.technologies)
                }
                astrominetransportations {
                    sources(sourceSets.transportations)
                }
            }
        }
        data {
            workingDirectory project.file('run_data')
            properties 'forge.logging.console.level': 'debug'
            environment 'target', 'fmluserdevdata'

            mods {
                astromine {
                    sources(sourceSets.main, sourceSets.dataMain)
                }
                astrominecore {
                    sources(sourceSets.core, sourceSets.dataCore)
                }
                astrominedatainit {
                    sources(sourceSets.dataInit, sourceSets.dataDataInit)
                }
                astrominediscoveries {
                    sources(sourceSets.discoveries, sourceSets.dataDiscoveries)
                }
                astrominefoundations {
                    sources(sourceSets.foundations, sourceSets.dataFoundations)
                }
                astrominetechnologies {
                    sources(sourceSets.technologies, sourceSets.dataTechnologies)
                }
                astrominetransportations {
                    sources(sourceSets.transportations, sourceSets.dataTransportations)
                }
            }
        }
        // So, somehow this is the ONLY run that doesn't work and needs manual fixing... whatever
        coreData {
            parent runs.data

            args '--all', '--output', project.file('astromine-core/generated/resources'),
                    '--mod', 'astrominecore', '--existing', sourceSets.core.resources.srcDirs[0]
        }
        discoveriesData {
            parent runs.data

            args '--all', '--output', project.file('astromine-discoveries/generated/resources'),
                    '--mod', 'astrominediscoveries', '--existing', sourceSets.discoveries.resources.srcDirs[0]
        }
        foundationsData {
            parent runs.data

            args '--all', '--output', project.file('astromine-foundations/generated/resources'),
                    '--mod', 'astrominefoundations', '--existing', sourceSets.foundations.resources.srcDirs[0]
        }
        technologiesData {
            parent runs.data

            args '--all', '--output', project.file('astromine-technologies/generated/resources'),
                    '--mod', 'astrominetechnologies', '--existing', sourceSets.technologies.resources.srcDirs[0]
        }
        transportationsData {
            parent runs.data

            args '--all', '--output', project.file('astromine-transportations/generated/resources'),
                    '--mod', 'astrominetransportations', '--existing', sourceSets.transportations.resources.srcDirs[0]
        }
    }
}

repositories {
    mavenLocal()
    maven {
        name = "Cloth"
        url = "https://dl.bintray.com/shedaniel/cloth"
    }
    maven {
        name "Garrett's Maven"
        url 'http://maven.tterrag.com/'
    }
    maven {
        name = "Modmaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { url "https://dl.bintray.com/shedaniel/autoconfig1u" }
    maven { url "https://dl.bintray.com/shedaniel/cloth-config-2" }
    maven { url "https://dl.bintray.com/shedaniel/cloth" }
}

dependencies {
//        dependencies.ext.useAsApiOptionally = { dep ->
//            modApi(dep) {
//                if (!dep.contains("net.fabricmc.fabric-api")) {
//                    exclude group: "net.fabricmc.fabric-api"
//                }
//                exclude group: "net.fabricmc"
//                if (!dep.contains("me.shedaniel")) {
//                    exclude group: "me.shedaniel"
//                }
//            }
//        }
//        dependencies.ext.useAsApi = { dep ->
//            useAsApiOptionally(dep)
//            if (project.name == "astromine-core")
//                include(dep)
//        }
//        dependencies.ext.useAsRuntime = { dep ->
//            modRuntime(dep) {
//                if (!dep.contains("net.fabricmc.fabric-api")) {
//                    exclude group: "net.fabricmc.fabric-api"
//                }
//                exclude group: "net.fabricmc"
//                if (!dep.contains("me.shedaniel")) {
//                    exclude group: "me.shedaniel"
//                }
//            }
//        }

    // Minecraft
    minecraft("net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}")

    // AutoConfig1u
    implementation(fg.deobf("me.shedaniel:autoconfig1u-forge:${auto_config_version}")) {
        transitive = false
    }
    /*
    compileOnly("me.shedaniel:autoconfig1u-forge:${auto_config_version}") {
        transitive = false
    }
    runtimeOnly(fg.deobf("me.shedaniel:autoconfig1u-forge:${auto_config_version}")) {
        transitive = false
    }
     */

    // Cloth Config
    implementation(fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"))

    // JetBrains Annotations
    implementation("org.jetbrains:annotations:19.0.0")

    // Kotlin Standard Library
    implementation("org.jetbrains.kotlin:kotlin-stdlib:${project.kotlin_version}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${project.kotlin_version}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${project.kotlin_version}")

    // Patchouli
    implementation(fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}"))

    // Roughly Enough Items
    implementation(fg.deobf("me.shedaniel:RoughlyEnoughItems:${rei_version}"))

    // Shapes
    implementation("com.terraformersmc:shapes:${shapes_version}") {
        transitive = false
    }

    // The One Probe
    implementation(fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${the_one_probe_version}"))
}

/*spotless {
    encoding 'UTF-8'
    enforceCheck(false)

    java {
        licenseHeaderFile(rootProject.file('HEADER'))
        removeUnusedImports()
        eclipse().configFile(rootProject.file('spotless/formatter-settings.xml'))
    }
}*/

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

/*
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier("sources")
    from sourceSets.main.allSource
}
 */

processResources {
    exclude 'META-INF/mods.toml'
    finalizedBy mainReplaceResources
}

processCoreResources {
    exclude 'META-INF/mods.toml'
    finalizedBy coreReplaceResources
}

processDataInitResources {
    exclude 'META-INF/mods.toml'
    finalizedBy dataInitReplaceResources
}

processDiscoveriesResources {
    exclude 'META-INF/mods.toml'
    finalizedBy discoveriesReplaceResources
}

processFoundationsResources {
    exclude 'META-INF/mods.toml'
    finalizedBy foundationsReplaceResources
}

processTechnologiesResources {
    exclude 'META-INF/mods.toml'
    finalizedBy technologiesReplaceResources
}

processTransportationsResources {
    exclude 'META-INF/mods.toml'
    finalizedBy transportationsReplaceResources
}

def makeManifest(String mod) {
    return [
            "Specification-Title": mod,
            "Specification-Vendor": "Astromine",
            "Specification-Version": "${project.mod_version}",
            "Implementation-Title": mod,
            "Implementation-Vendor": "Mixinors",
            "Implementation-Version": "${project.mod_version}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ]
}

jar {
    from sourceSets.main.output
    manifest.attributes(makeManifest("AstromineMain"))
}

task coreJar(type: Jar) {
    shouldRunAfter(coreReplaceResources)
    archiveName = "AstromineCore-${project.version}.jar"
    classifier = "core"
    from sourceSets.core.output
    manifest.attributes(makeManifest("AstromineCore"))
    afterEvaluate {
        finalizedBy reobfCoreJar
    }
}

task dataInitJar(type: Jar) {
    shouldRunAfter(dataInitReplaceResources)
    archiveName = "AstromineDataInit-${project.version}.jar"
    classifier = "dataInit"
    from sourceSets.dataInit.output
    manifest.attributes(makeManifest("AstromineDataInit"))
    afterEvaluate {
        finalizedBy reobfDataInitJar
    }
}

task discoveriesJar(type: Jar) {
    shouldRunAfter(discoveriesReplaceResources)
    archiveName = "AstromineDiscoveries-${project.version}.jar"
    classifier = "discoveries"
    from sourceSets.discoveries.output
    manifest.attributes(makeManifest("AstromineDiscoveries"))
    afterEvaluate {
        finalizedBy reobfDiscoveriesJar
    }
}

task foundationsJar(type: Jar) {
    shouldRunAfter(foundationsReplaceResources)
    archiveName = "AstromineFoundations-${project.version}.jar"
    classifier = "foundations"
    from sourceSets.foundations.output
    manifest.attributes(makeManifest("AstromineFoundations"))
    afterEvaluate {
        finalizedBy reobfFoundationsJar
    }
}

task technologiesJar(type: Jar) {
    shouldRunAfter(technologiesReplaceResources)
    archiveName = "AstromineTechnologies-${project.version}.jar"
    classifier = "technologies"
    from sourceSets.technologies.output
    manifest.attributes(makeManifest("AstromineTechnologies"))
    afterEvaluate {
        finalizedBy reobfTechnologiesJar
    }
}

task transportationsJar(type: Jar) {
    shouldRunAfter(transportationsReplaceResources)
    archiveName = "AstromineTransportations-${project.version}.jar"
    classifier = "transportations"
    from sourceSets.transportations.output
    manifest.attributes(makeManifest("AstromineTransportations"))
    afterEvaluate {
        finalizedBy reobfTransportationsJar
    }
}

task fatJar(type: Jar) {
    shouldRunAfter(jar, coreJar, dataInitJar, discoveriesJar, foundationsJar, technologiesJar, transportationsJar, processResources, processCoreResources, processDataInitResources,
            processDiscoveriesResources, processFoundationsResources, processTechnologiesResources, processTransportationsResources)
    afterEvaluate {
        finalizedBy reobfFatJar
    }
    classifier = "fat"
    manifest.attributes(makeManifest("Astromine"))
    doFirst {
        mkDir("$buildDir/generated/META-INF")
        (new File("$buildDir/generated/META-INF/accesstransformer.cfg")).text = mergeATs(sourceSets.main, sourceSets.core, sourceSets.discoveries,
                sourceSets.foundations, sourceSets.technologies, sourceSets.transportations)
        (new File("$buildDir/generated/META-INF/mods.toml")).text = mergeTomls(sourceSets.main, sourceSets.core, sourceSets.discoveries,
                sourceSets.foundations, sourceSets.technologies, sourceSets.transportations)
    }
    from (sourceSets.main.output) {
        exclude 'META-INF/mods.toml'
        exclude 'META-INF/accesstransformer.cfg'
    }
    from (sourceSets.core.output) {
        exclude 'META-INF/mods.toml'
        exclude 'META-INF/accesstransformer.cfg'
        exclude 'pack.mcmeta'
    }
    from (sourceSets.dataInit.output) {
        exclude 'META-INF/mods.toml'
        exclude 'META-INF/accesstransformer.cfg'
        exclude 'pack.mcmeta'
    }
    from (sourceSets.discoveries.output) {
        exclude 'META-INF/mods.toml'
        exclude 'META-INF/accesstransformer.cfg'
        exclude 'pack.mcmeta'
    }
    from (sourceSets.foundations.output) {
        exclude 'META-INF/mods.toml'
        exclude 'META-INF/accesstransformer.cfg'
        exclude 'pack.mcmeta'
    }
    from (sourceSets.technologies.output) {
        exclude 'META-INF/mods.toml'
        exclude 'META-INF/accesstransformer.cfg'
        exclude 'pack.mcmeta'
    }
    from (sourceSets.transportations.output) {
        exclude 'META-INF/mods.toml'
        exclude 'META-INF/accesstransformer.cfg'
        exclude 'pack.mcmeta'
    }
    from ("$buildDir/generated") {
        include 'META-INF/mods.toml'
        expand versionProperties
    }
    from ("$buildDir/generated") {
        include 'META-INF/accesstransformer.cfg'
    }
}

static String mergeATs(SourceSet... sets) {
    String text = ""
    for (def set : sets) {
        text += set.name
        text += "\n"
        set.resources.matching {
            include 'META-INF/accesstransformer.cfg'
        }.each {
            text += it.getText()
            text += "\n"
        }
    }
    return text
}

static String mergeTomls(SourceSet... sets) {
    String text = ""
    for (def set : sets) {
        set.resources.matching {
            include 'META-INF/mods.toml'
        }.each {
            if (text.isEmpty()) {
                text = it.getText()
            } else {
                def lines = it.getText().split("\n")
                for (int i = 4; i < lines.length; ++i) {
                    text += "\n"
                    text += lines[i]
                }
            }
        }
    }
    return text
}

artifacts {
    archives jar
    archives coreJar
    archives dataInitJar
    archives discoveriesJar
    archives foundationsJar
    archives technologiesJar
    archives transportationsJar
}

reobf {
    jar {
        classpath = sourceSets.main.compileClasspath
    }
    coreJar {
        classpath = sourceSets.core.compileClasspath
    }
    dataInitJar {
        classpath = sourceSets.dataInit.compileClasspath
    }
    discoveriesJar {
        classpath = sourceSets.discoveries.compileClasspath
    }
    foundationsJar {
        classpath = sourceSets.foundations.compileClasspath
    }
    technologiesJar {
        classpath = sourceSets.technologies.compileClasspath
    }
    transportationsJar {
        classpath = sourceSets.transportations.compileClasspath
    }
    fatJar {}
}

/*
subprojects {
    archivesBaseName = project.name

    ext {
        cfProjectId = -1
    }

    task remapMavenJar(type: Copy, dependsOn: remapJar) {
        afterEvaluate {
            from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
            into("${project.buildDir}/libs/")
            rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
        }
    }

    configurations {
        dev
        remapped
    }

    jar {
        classifier("dev")
    }

    artifacts {
        dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
    }

    task jarFilter(type: net.corda.gradle.jarfilter.JarFilterTask) {
        jars jar
        annotations {
            forRemove = [
                    "org.jetbrains.annotations.NotNull",
                    "org.jetbrains.annotations.Nullable",
                    "org.jetbrains.annotations.ApiStatus\$Experimental",
                    "org.jetbrains.annotations.ApiStatus\$Internal",
                    "org.jetbrains.annotations.ApiStatus\$ScheduledForRemoval",
                    "org.jetbrains.annotations.ApiStatus\$AvailableSince",
                    "org.jetbrains.annotations.ApiStatus\$NonExtendable",
                    "org.jetbrains.annotations.ApiStatus\$OverrideOnly"
            ]
        }
    }

    remapJar.dependsOn("jarFilter")

    afterEvaluate {
        if (shouldGenerateData) {
            sourceSets {
                main {
                    resources {
                        srcDir 'src/generated/resources'
                    }
                }
                datagen {
                    compileClasspath += main.compileClasspath
                    runtimeClasspath += main.runtimeClasspath
                }
            }

            task datagenJar(type: Jar) {
                classifier("datagen")
                from sourceSets.datagen.output
            }

            configurations {
                datagenDev
                datagenCompile.extendsFrom(compileClasspath)
            }

            dependencies {
                datagenCompile sourceSets.main.output
            }

            artifacts {
                datagenDev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-datagen.jar"), type: 'jar', builtBy: datagenJar
            }

            if (isRunningGenerateDataTask) {
//                task generateData(type: RunClientTask, dependsOn: downloadAssets) {
//                    classpath = configurations.runtimeClasspath
//                    classpath sourceSets.datagen.runtimeClasspath
//                    classpath sourceSets.main.output
//                    classpath sourceSets.datagen.output
//                }
            }
        }

        curseforge {
            if ((project.hasProperty('curse_api_key') || System.getenv('curse_api_key') != null) && cfProjectId >= 0) {
                project {
                    id = cfProjectId.toString()
                    releaseType = rootProject.release_cycle
                    changelog = "View the changelog at https://github.com/Chainmail-Studios/Astromine"
                    ((String) rootProject.tagged_versions).split(",").each {
                        addGameVersion it
                    }
                    relations {
                        requiredDependency "fabric-api"
                        embeddedLibrary "cloth-api"
                        embeddedLibrary "cloth-config"
                        embeddedLibrary "auto-config-updated-api"
                        embeddedLibrary "cardinal-components"
                        embeddedLibrary "libblockattributes"
                        embeddedLibrary "patchouli-fabric"
                    }
                    mainArtifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar"))
                }
            }
            options {
                forgeGradleIntegration = false
                javaVersionAutoDetect = false
            }
        }
    }

    publishing {
        publications {
            create("${archivesBaseName}_mavenJava", MavenPublication) {
                afterEvaluate {
                    artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-maven.jar")) {
                        builtBy remapMavenJar
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }
        }
    }

    task copyBuiltToMain(type: Copy) {
        from "${project.buildDir}/libs/"
        into "${rootProject.buildDir}/libs/"
        include "*.jar"
    }
    build.finalizedBy(copyBuiltToMain)
}

task generateDataAll
subprojects.forEach {
    if (it.isRunningGenerateDataTask) {
        generateDataAll.dependsOn("${it.path}:generateData")
    }
}

task deleteBuildFolderAll {
    doLast {
        allprojects {
            delete it.buildDir
            mkdir "${it.buildDir}/libs"
        }
    }
}
build.mustRunAfter(deleteBuildFolderAll)

task releaseOnCf
releaseOnCf.dependsOn(":curseforge")
subprojects { releaseOnCf.dependsOn("${it.path}:curseforge") }
//subprojects { rootProject.remapJar.dependsOn("${it.path}:remapJar") }
//subprojects { rootProject.spotlessApply.dependsOn("${it.path}:spotlessApply") }

//task remapMavenJar(type: RemapJarTask, dependsOn: jar) {
//    afterEvaluate {
//        input.set(file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar"))
//        archiveName = "${archivesBaseName}-${version}-maven.jar"
//        addNestedDependencies.set(false)
//    }
//}

sourceSets {
    datagen
}

dependencies {
    afterEvaluate {
        subprojects.each {
            compile project(path: ":${it.path}", configuration: "dev")
            if (!it.isRunningGenerateDataTask) {
                include project(path: ":${it.path}", configuration: "remapped")
            }
        }
    }
}
*/

publishing {
    publications {
        mavenJava(MavenPublication) {
//            artifact(file("${project.buildDir}/libs/$archivesBaseName-${project.version}-maven.jar")) {
//                builtBy remapMavenJar
//            }
//            artifact(sourcesJar) {
//                builtBy remapSourcesJar
//            }
            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    if (!it.isRunningGenerateDataTask) {
                        def depNode = depsNode.appendNode("dependency")
                        depNode.appendNode("groupId", it.group)
                        depNode.appendNode("artifactId", it.name)
                        depNode.appendNode("version", it.version)
                        depNode.appendNode("scope", "compile")
                    }
                }
            }
        }
    }
}

tasks.curseforge.dependsOn jar, coreJar, dataInitJar, discoveriesJar, foundationsJar, technologiesJar, transportationsJar

curseforge {
    if (project.hasProperty('curse_api_key') || System.getenv('curse_api_key') != null) {
        apiKey = project.hasProperty('curse_api_key') ? project.property('curse_api_key') : System.getenv('curse_api_key')
        // TODO Add all other projects
        project {
            id = "391739"
            releaseType = project.release_cycle
            // TODO: Generate
            changelog = "View the changelog at https://github.com/Chainmail-Studios/Astromine"
            ((String) project.tagged_versions).split(",").each {
                addGameVersion it
            }
            relations {
                requiredDependency "fabric-api"
                embeddedLibrary "cloth-api"
                embeddedLibrary "cloth-config"
                embeddedLibrary "auto-config-updated-api"
                embeddedLibrary "cardinal-components"
                embeddedLibrary "libblockattributes"
                embeddedLibrary "patchouli-fabric"
            }
            mainArtifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar"))
        }
    }
    options {
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}
